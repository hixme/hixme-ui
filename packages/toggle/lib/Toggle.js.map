{"version":3,"sources":["../src/Toggle.js"],"names":["ToggleButton","truthyText","falsyText","noLabels","rest","getProps","allowedKeys","reduce","prev","current","indexOf","withLabels","ToggleLabel","checked","margin","displayName","huiName","propTypes","PropTypes","string","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,OAMf;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MADDC,IACC;;AACJ;AACA,MAAMC,WAAW,SAAXA,QAAW,GAAM;AACrB,QAAMC,cAAc,CAClB,SADkB,EAElB,UAFkB,EAGlB,MAHkB,EAIlB,SAJkB,EAKlB,WALkB,EAMlB,YANkB,EAOlB,UAPkB,EAQlB,aARkB,EASlB,QATkB,EAUlB,aAVkB,EAWlB,UAXkB,EAYlB,MAZkB,EAalB,OAbkB,CAApB;;AAgBA;AACA,WAAO,oBAAYF,IAAZ,EAAkBG,MAAlB,CAAyB,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACjD,UAAIH,YAAYI,OAAZ,CAAoBD,OAApB,MAAiC,CAAC,CAAtC,EAAyC;AACvCD,aAAKC,OAAL,IAAgBL,KAAKK,OAAL,CAAhB;AACD;AACD,aAAOD,IAAP;AACD,KALM,EAKJ,EALI,CAAP;AAMD,GAxBD;;AA0BA,MAAMG,aAAa,CAACR,QAApB;AACA,MAAMS,cAAc,SAAdA,WAAc,GAAM;AACxB,QAAID,UAAJ,EAAgB;AACd,aAAOP,KAAKS,OAAL,GACL;AAAC,sBAAD;AAAA,UAAM,WAAN,EAAY,OAAO,EAAEC,QAAQ,YAAV,EAAnB;AACGb;AADH,OADK,GAKL;AAAC,sBAAD;AAAA,UAAM,WAAN,EAAY,OAAO,EAAEa,QAAQ,YAAV,EAAnB;AACGZ;AADH,OALF;AASD;AACD,WAAO,2CAAP;AACD,GAbD;;AAeA,SACE;AAAC,0BAAD;AAAA;AACE;AAAA;AAAA;AACE,sEAAO,MAAK,UAAZ,IAA2BG,UAA3B,EADF;AAEE,oCAAC,gBAAD,2BAAQ,IAAG,QAAX,IAAwBA,UAAxB,EAFF;AAGE,oCAAC,WAAD;AAHF;AADF,GADF;AASD,CA3DD;;AA6DAL,aAAae,WAAb,GAA2B,kBAA3B;AACAf,aAAagB,OAAb,GAAuB,cAAvB;;AAEAhB,aAAaiB,SAAb,GAAyB;AACvBhB,cAAYiB,oBAAUC,MADC;AAEvBjB,aAAWgB,oBAAUC,MAFE;AAGvBhB,YAAUe,oBAAUE;AACpB;AAJuB,CAAzB;;AAOApB,aAAaqB,YAAb,GAA4B;AAC1BpB,cAAY,KADc;AAE1BC,aAAW,IAFe;AAG1BC,YAAU;AACV;AAJ0B,CAA5B;;kBAOeH,Y","file":"Toggle.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Text from '@hixme-ui/text'\n\nimport StyledToggle from './StyledToggle'\nimport Slider from './Slider'\n\nconst ToggleButton = ({\n  truthyText,\n  falsyText,\n  noLabels,\n  // withIcons,\n  ...rest\n}) => {\n  // restrict redux form props\n  const getProps = () => {\n    const allowedKeys = [\n      'checked',\n      'disabled',\n      'name',\n      'onKeyUp',\n      'onKeyDown',\n      'onKeyPress',\n      'onChange',\n      'onDragStart',\n      'onDrop',\n      'placeholder',\n      'tabIndex',\n      'type',\n      'value',\n    ]\n\n    /* eslint-disable no-param-reassign */\n    return Object.keys(rest).reduce((prev, current) => {\n      if (allowedKeys.indexOf(current) !== -1) {\n        prev[current] = rest[current]\n      }\n      return prev\n    }, {})\n  }\n\n  const withLabels = !noLabels\n  const ToggleLabel = () => {\n    if (withLabels) {\n      return rest.checked ? (\n        <Text large style={{ margin: '0 0 0 14px' }}>\n          {truthyText}\n        </Text>\n      ) : (\n        <Text large style={{ margin: '0 0 0 14px' }}>\n          {falsyText}\n        </Text>\n      )\n    }\n    return <span />\n  }\n\n  return (\n    <StyledToggle>\n      <div>\n        <input type='checkbox' {...getProps()} />\n        <Slider id='slider' {...getProps()} />\n        <ToggleLabel />\n      </div>\n    </StyledToggle>\n  )\n}\n\nToggleButton.displayName = 'hui:ToggleButton'\nToggleButton.huiName = 'ToggleButton'\n\nToggleButton.propTypes = {\n  truthyText: PropTypes.string,\n  falsyText: PropTypes.string,\n  noLabels: PropTypes.bool,\n  // withIcons: PropTypes.bool,\n}\n\nToggleButton.defaultProps = {\n  truthyText: 'Yes',\n  falsyText: 'No',\n  noLabels: false,\n  // withIcons: false,\n}\n\nexport default ToggleButton\n"]}